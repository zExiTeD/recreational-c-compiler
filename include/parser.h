#ifndef PARSER_H
#define PARSER_H

typedef enum {
	T_EOF,
	T_IDENTIFIER,
	T_NUMBER,
	T_STRING,

	T_INT,    T_CHAR, 	  T_SHORT, T_LONG,
	T_FLOAT, 	T_DOUBLE,   T_VOID,
	T_SIGNED, T_UNSIGNED,
	T_STRUCT, T_UNION, 		T_ENUM,
	T_IF, 		T_ELSE,  	  T_WHILE, T_FOR,
	T_DO, 		T_SWITCH,	  T_CASE, T_DEFAULT,
	T_BREAK, 	T_CONTINUE, T_RETURN,
	T_GOTO, 	T_SIZEOF,   T_TYPEDEF,
	T_STATIC, T_EXTERN,   T_AUTO, T_REGISTER,
	T_CONST, 	T_VOLATILE,

	T_PLUS, T_MINUS, T_STAR, T_SLASH, T_PERCENT,
	T_ASSIGN, T_PLUS_ASSIGN, T_MINUS_ASSIGN,
	T_STAR_ASSIGN, T_SLASH_ASSIGN, T_PERCENT_ASSIGN,
	T_EQUALTO, T_NOTEQUALTO, T_LESSTHAN, T_LESSTHANEQUALTO, T_GREATERTHAN, T_GREATERTHANEQUALTO,
	T_AND, T_OR, T_NOT,
	T_BIT_AND, T_BIT_OR, T_BIT_XOR, T_BIT_NOT,
	T_LSHIFT, T_RSHIFT,
	T_INCREMENT, T_DECREMENT,
	T_ARROW, T_DOT,
	T_QUESTION, T_COLON,

	T_LPAREN,  	T_RPAREN,
	T_LBRACE, 	T_RBRACE,
	T_LBRACKET, T_RBRACKET,
	T_SEMICOLON,T_COMMA,

	T_HASH,

} AST_TokenType;

typedef enum {
	PROGRAM,
	FUNCTION_DEF,
	DECLARATION,
	COMPOUND_STMT,
	RETURN_STMT,
	IF_STMT,
	WHILE_STMT,
	FOR_STMT,
	EXPRESSION_STMT,
	BINARY_OP,
	UNARY_OP,
	ASSIGN,
	CALL,
	IDENTIFIER,
	LITERAL,
	PARAMETER,
	DECLARATOR,
	INIT_DECLARATOR,
	TYPE_SPECIFIER,
} NodeType;

#endif//PARSER_H
